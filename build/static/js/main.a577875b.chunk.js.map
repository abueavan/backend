{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","footStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","toggleImportanceOf","find","n","changedNote","map","catch","error","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCK7BK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAIP,yBAAKJ,UAAU,SACVI,I,gBCkBE,EAtBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,UAIRC,EAAc,CAClBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,MAcxC,EAXA,SAAAO,GAEb,OADgBT,IAAMU,KAdR,SAcsBD,GACrBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAS5B,EANA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,SAmBE,YAAwBR,GAAMM,GAC/BJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,Q,4NClB3C,IAAMK,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAgGUC,EA3FJ,SAACC,GAAW,IAAD,EAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,OAGSF,mBAAS,IAHlB,mBAGdG,EAHc,KAGLC,EAHK,OAISJ,oBAAS,GAJlB,mBAIdK,EAJc,KAILC,EAJK,OAKmBN,mBAAS,MAL5B,mBAKdO,EALc,KAKAC,EALA,KAOrBC,oBAAU,WACRC,IAECxB,KAAK,SAAAE,GACJc,EAASd,MAEV,IAGH,IAiBMuB,EAAqB,SAAA3B,GACzB,IAAMb,EAAO8B,EAAMW,KAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,IAChC8B,E,qVAAW,IAAQ3C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDoC,EACQ1B,EAAI8B,GACX5B,KAAK,SAAAE,GACJc,EAASD,EAAMc,IAAI,SAAA5C,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOiB,OAEpD4B,MAAM,SAAAC,GACHT,EAAgB,SAAD,OACNrC,EAAKK,QADC,sCAGjB0C,WAAY,WACVV,EAAgB,OACf,KACHN,EAASD,EAAMkB,OAAO,SAAAN,GAAC,OAAIA,EAAE7B,KAAOA,QAGlCoC,EAAcf,EAAUJ,EAAQA,EAAMkB,OAAO,SAAAhD,GAAI,OAAIA,EAAKG,YAahE,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAcK,QAAS4B,IAEvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAvBce,EAAYL,IAAI,SAAA5C,GAAI,OACpC,kBAAC,EAAD,CACEA,KAAQA,EACRkD,IAAOlD,EAAKa,GACZZ,iBAAkB,kBAAMuC,EAAmBxC,EAAKa,UAsBhD,0BAAMsC,SA/DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBjD,QAAS2B,EACTlB,MAAM,IAAIyC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAG7BnB,EACQe,GACPvC,KAAK,SAAAE,GACJc,EAASD,EAAMZ,OAAOD,IACtBgB,EAAW,QAoDT,2BACA0B,MAAO3B,EACP4B,SArBmB,SAACR,GACxBnB,EAAWmB,EAAMS,OAAOF,UAqBpB,4BAAQG,KAAK,UAAb,SAGF,kBAAC,EAAD,Q,MCrGJC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a577875b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n      ? 'make not important' : 'make important'\r\n  \r\n    return (\r\n      <li className='note'>\r\n        {note.content} \r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n    )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/notes'\r\n//const baseUrl = 'https://powerful-headland-51216.herokuapp.com/notes'\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update}","import React, {useState, useEffect} from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport noteService from './services/notes'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    footStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = (props) => {\r\n  \r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n    .getAll()\r\n    .then(data => {\r\n      setNotes(data)\r\n    })\r\n  }, [])\r\n\r\n \r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    }\r\n\r\n    noteService\r\n    .create(noteObject)\r\n    .then(data => {\r\n      setNotes(notes.concat(data))\r\n      setNewNote('')\r\n    })\r\n    \r\n  }\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n  \r\n    noteService\r\n    .update(id, changedNote)\r\n    .then(data => {\r\n      setNotes(notes.map(note => note.id !== id ? note : data))\r\n    })\r\n    .catch(error => {      \r\n        setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setTimeout( () => {\r\n        setErrorMessage(null)\r\n      }, 5000)      \r\n      setNotes(notes.filter(n => n.id !== id))    })\r\n  }\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\r\n  const row = () => notesToShow.map(note => \r\n    <Note \r\n      note = {note} \r\n      key = {note.id}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n    )  \r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Notification message={errorMessage} />\r\n      \r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {row()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input \r\n        value={newNote}\r\n        onChange={handleNoteChange} />\r\n        <button type='submit'>save</button>\r\n      </form>\r\n\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n  \r\n export default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  )\n  \n\n\n\n"],"sourceRoot":""}